{"remainingRequest":"/home/ash/opol7/node_modules/babel-loader/lib/index.js!/home/ash/opol7/node_modules/eslint-loader/index.js??ref--13-0!/home/ash/opol7/src/modules/equipment/hardware/hardware.js","dependencies":[{"path":"/home/ash/opol7/src/modules/equipment/hardware/hardware.js","mtime":1529574145392},{"path":"/home/ash/opol7/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/ash/opol7/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/home/ash/opol7/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import _defineProperty from \"/home/ash/opol7/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\n\nvar _mutations;\n\n// import * as db from '../../../core/firebaseInit'\nimport firebase from 'firebase';\nimport _ from 'lodash'; // import db from '../../../main'\n\nimport * as db from '../../../firebase';\nexport var RECEIVE_HARDWARES = 'RECEIVE_HARDWARES';\nexport var LOADING_HARDWARES = 'LOADING_HARDWARES';\nexport var SELECT_HARDWARES = 'SELECT_HARDWARES';\nexport var SET_TOTAL_NUMBER_OF_HARDWARES = 'SET_TOTAL_NUMBER_OF_HARDWARES';\nexport var SET_PAGINATION_FIRST_HARDWARES = 'SET_PAGINATION_FIRST_HARDWARES';\nexport var SET_PAGINATION_LAST_HARDWARES = 'SET_PAGINATION_LAST_HARDWARES';\nexport var UPDATE_PAGINATION_DATA = 'UPDATE_PAGINATION_DATA'; // initial state\n// var hardwares = db.collection('hardwares')\n// var stats = db.collection('stats')\n\nvar state = {\n  loading: false,\n  hardwares: {},\n  totalNumberOfHardwares: 0,\n  selectedHardware: undefined,\n  pagination: {\n    rowsPerPage: 5,\n    page: 1,\n    lastHardware: undefined,\n    firstHardware: undefined\n  } // getters\n\n};\nvar getters = {\n  hardwares: function hardwares(state) {\n    return _.values(state.hardwares);\n  },\n  totalNumberOfHardwares: function totalNumberOfHardwares(state) {\n    return state.totalNumberOfHardwares;\n  },\n  loading: function loading(state) {\n    return state.loading;\n  },\n  selectedHardware: function selectedHardware(state) {\n    return state.hardwares[state.selectedHardware];\n  } // actions\n\n};\nvar actions = {\n  find: function find(context) {\n    var hardwaresQuery = db.hardwares.orderBy('asset_tag').limit(context.state.pagination.rowsPerPage);\n    findHardwares(context, hardwaresQuery);\n  },\n  findNext: function findNext(context) {\n    var hardwaresQuery = db.hardwares.orderBy('asset_tag').limit(context.state.pagination.rowsPerPage).startAfter(context.state.pagination.lastHardware);\n    findHardwares(context, hardwaresQuery);\n  },\n  findPrevious: function findPrevious(context) {\n    var hardwaresQuery = db.hardwares.orderBy('asset_tag').limit(context.state.pagination.rowsPerPage).endBefore(context.state.pagination.firstHardware); // let hardwaresQuery = db.hardwares.orderBy('title').limit(context.state.pagination.rowsPerPage).endAt(context.state.pagination.lastHardware)\n\n    findHardwares(context, hardwaresQuery);\n  },\n  selectHardware: function selectHardware(_ref, selectedHardware) {\n    var commit = _ref.commit;\n    commit(SELECT_HARDWARES, selectedHardware);\n  },\n  insert: function insert(_ref2, hardware) {\n    var commit = _ref2.commit,\n        dispatch = _ref2.dispatch;\n    return db.hardwares.add(hardware);\n  },\n  update: function update(_ref3, hardware) {\n    var commit = _ref3.commit,\n        dispatch = _ref3.dispatch;\n    return db.hardwares.doc(hardware.id).update({\n      asset_tag: hardware.asset_tag,\n      assigned_to: hardware.assigned_to,\n      category: hardware.category,\n      image: hardware.image,\n      location: hardware.location,\n      model: hardware.model,\n      notes: hardware.notes,\n      order_number: hardware.order_number,\n      serial: hardware.serial,\n      status_label: hardware.status_label,\n      supplier: hardware.supplier\n    });\n  },\n  delete: function _delete(_ref4, hardware) {\n    var commit = _ref4.commit,\n        dispatch = _ref4.dispatch;\n    return db.hardwares.doc(hardware.id).delete();\n  }\n}; // mutations\n\nvar mutations = (_mutations = {}, _defineProperty(_mutations, RECEIVE_HARDWARES, function (state, _ref5) {\n  var hardwares = _ref5.hardwares;\n  state.hardwares = hardwares;\n}), _defineProperty(_mutations, SELECT_HARDWARES, function (state, selectedHardware) {\n  state.selectedHardware = selectedHardware;\n}), _defineProperty(_mutations, LOADING_HARDWARES, function (state, value) {\n  state.loading = value;\n}), _defineProperty(_mutations, SET_TOTAL_NUMBER_OF_HARDWARES, function (state, value) {\n  state.totalNumberOfHardwares = value;\n}), _defineProperty(_mutations, SET_PAGINATION_FIRST_HARDWARES, function (state, value) {\n  state.pagination.firstHardware = value;\n}), _defineProperty(_mutations, SET_PAGINATION_LAST_HARDWARES, function (state, value) {\n  state.pagination.lastHardware = value;\n}), _defineProperty(_mutations, UPDATE_PAGINATION_DATA, function (state, _ref6) {\n  var rowsPerPage = _ref6.rowsPerPage,\n      page = _ref6.page;\n  state.pagination.rowsPerPage = rowsPerPage;\n  state.pagination.page = page;\n}), _mutations); // private helper functions\n\nfunction getHardwaresFromSnapshot(snapshot) {\n  var hardwares = {};\n  snapshot.forEach(function (doc) {\n    var hardware = doc.data();\n    hardware.id = doc.id;\n    hardwares[hardware.id] = hardware;\n  });\n  return hardwares;\n}\n\nfunction findHardwares(context, hardwaresQuery) {\n  var statsQuery = db.stats.doc('hardwares');\n  context.commit(LOADING_HARDWARES, true);\n  Promise.all([hardwaresQuery.get(), statsQuery.get()]).then(function (values) {\n    console.log(values);\n    var snapshotHardwares = values[0];\n    var snapshotNumberOfHardwares = values[1];\n    var hardwares = getHardwaresFromSnapshot(snapshotHardwares);\n    setupPagination(context, snapshotHardwares, snapshotNumberOfHardwares);\n    context.commit(RECEIVE_HARDWARES, {\n      hardwares: hardwares\n    });\n    context.commit(LOADING_HARDWARES, false);\n  });\n}\n\nfunction setupPagination(context, snapshotHardwares, snapshotNumberOfHardwares) {\n  context.commit(SET_PAGINATION_FIRST_HARDWARES, snapshotHardwares.docs[0]);\n  context.commit(SET_PAGINATION_LAST_HARDWARES, snapshotHardwares.docs[snapshotHardwares.docs.length - 1]);\n  context.commit(SET_TOTAL_NUMBER_OF_HARDWARES, snapshotNumberOfHardwares.data().count);\n}\n\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["src/modules/equipment/hardware/hardware.js"],"names":["firebase","_","db","RECEIVE_HARDWARES","LOADING_HARDWARES","SELECT_HARDWARES","SET_TOTAL_NUMBER_OF_HARDWARES","SET_PAGINATION_FIRST_HARDWARES","SET_PAGINATION_LAST_HARDWARES","UPDATE_PAGINATION_DATA","state","loading","hardwares","totalNumberOfHardwares","selectedHardware","undefined","pagination","rowsPerPage","page","lastHardware","firstHardware","getters","values","actions","find","context","hardwaresQuery","orderBy","limit","findHardwares","findNext","startAfter","findPrevious","endBefore","selectHardware","commit","insert","hardware","dispatch","add","update","doc","id","asset_tag","assigned_to","category","image","location","model","notes","order_number","serial","status_label","supplier","delete","mutations","value","getHardwaresFromSnapshot","snapshot","forEach","data","statsQuery","stats","Promise","all","get","then","console","log","snapshotHardwares","snapshotNumberOfHardwares","setupPagination","docs","length","count","namespaced"],"mappings":"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","sourceRoot":"/home/ash/opol7","sourcesContent":["// import * as db from '../../../core/firebaseInit'\nimport firebase from 'firebase'\nimport _ from 'lodash'\n// import db from '../../../main'\nimport * as db from '../../../firebase'\nexport const RECEIVE_HARDWARES = 'RECEIVE_HARDWARES'\nexport const LOADING_HARDWARES = 'LOADING_HARDWARES'\nexport const SELECT_HARDWARES = 'SELECT_HARDWARES'\nexport const SET_TOTAL_NUMBER_OF_HARDWARES = 'SET_TOTAL_NUMBER_OF_HARDWARES'\nexport const SET_PAGINATION_FIRST_HARDWARES = 'SET_PAGINATION_FIRST_HARDWARES'\nexport const SET_PAGINATION_LAST_HARDWARES = 'SET_PAGINATION_LAST_HARDWARES'\nexport const UPDATE_PAGINATION_DATA = 'UPDATE_PAGINATION_DATA'\n// initial state\n// var hardwares = db.collection('hardwares')\n// var stats = db.collection('stats')\n\nconst state = {\n  loading: false,\n  hardwares: {},\n  totalNumberOfHardwares: 0,\n  selectedHardware: undefined,\n  pagination: {\n    rowsPerPage: 5,\n    page: 1,\n    lastHardware: undefined,\n    firstHardware: undefined,\n  },\n}\n\n// getters\nconst getters = {\n  hardwares: state => _.values(state.hardwares),\n  totalNumberOfHardwares: state => state.totalNumberOfHardwares,\n  loading: state => state.loading,\n  selectedHardware: state => state.hardwares[state.selectedHardware],\n}\n\n// actions\nconst actions = {\n  find(context) {\n    let hardwaresQuery = db.hardwares\n      .orderBy('asset_tag')\n      .limit(context.state.pagination.rowsPerPage)\n    findHardwares(context, hardwaresQuery)\n  },\n\n  findNext(context) {\n    let hardwaresQuery = db.hardwares\n      .orderBy('asset_tag')\n      .limit(context.state.pagination.rowsPerPage)\n      .startAfter(context.state.pagination.lastHardware)\n    findHardwares(context, hardwaresQuery)\n  },\n\n  findPrevious(context) {\n    let hardwaresQuery = db.hardwares\n      .orderBy('asset_tag')\n      .limit(context.state.pagination.rowsPerPage)\n      .endBefore(context.state.pagination.firstHardware)\n    // let hardwaresQuery = db.hardwares.orderBy('title').limit(context.state.pagination.rowsPerPage).endAt(context.state.pagination.lastHardware)\n    findHardwares(context, hardwaresQuery)\n  },\n\n  selectHardware({ commit }, selectedHardware) {\n    commit(SELECT_HARDWARES, selectedHardware)\n  },\n\n  insert({ commit, dispatch }, hardware) {\n    return db.hardwares.add(hardware)\n  },\n\n  update({ commit, dispatch }, hardware) {\n    return db.hardwares.doc(hardware.id).update({\n      asset_tag: hardware.asset_tag,\n      assigned_to: hardware.assigned_to,\n      category: hardware.category,\n      image: hardware.image,\n      location: hardware.location,\n      model: hardware.model,\n      notes: hardware.notes,\n      order_number: hardware.order_number,\n      serial: hardware.serial,\n      status_label: hardware.status_label,\n      supplier: hardware.supplier,\n    })\n  },\n\n  delete({ commit, dispatch }, hardware) {\n    return db.hardwares.doc(hardware.id).delete()\n  },\n}\n\n// mutations\nconst mutations = {\n  [RECEIVE_HARDWARES](state, { hardwares }) {\n    state.hardwares = hardwares\n  },\n  [SELECT_HARDWARES](state, selectedHardware) {\n    state.selectedHardware = selectedHardware\n  },\n  [LOADING_HARDWARES](state, value) {\n    state.loading = value\n  },\n  [SET_TOTAL_NUMBER_OF_HARDWARES](state, value) {\n    state.totalNumberOfHardwares = value\n  },\n  [SET_PAGINATION_FIRST_HARDWARES](state, value) {\n    state.pagination.firstHardware = value\n  },\n  [SET_PAGINATION_LAST_HARDWARES](state, value) {\n    state.pagination.lastHardware = value\n  },\n  [UPDATE_PAGINATION_DATA](state, { rowsPerPage, page }) {\n    state.pagination.rowsPerPage = rowsPerPage\n    state.pagination.page = page\n  },\n}\n\n// private helper functions\nfunction getHardwaresFromSnapshot(snapshot) {\n  let hardwares = {}\n  snapshot.forEach(doc => {\n    let hardware = doc.data()\n    hardware.id = doc.id\n    hardwares[hardware.id] = hardware\n  })\n\n  return hardwares\n}\n\nfunction findHardwares(context, hardwaresQuery) {\n  let statsQuery = db.stats.doc('hardwares')\n\n  context.commit(LOADING_HARDWARES, true)\n\n  Promise.all([hardwaresQuery.get(), statsQuery.get()]).then(values => {\n    console.log(values)\n    let snapshotHardwares = values[0]\n    let snapshotNumberOfHardwares = values[1]\n    let hardwares = getHardwaresFromSnapshot(snapshotHardwares)\n    setupPagination(context, snapshotHardwares, snapshotNumberOfHardwares)\n    context.commit(RECEIVE_HARDWARES, { hardwares })\n    context.commit(LOADING_HARDWARES, false)\n  })\n}\n\nfunction setupPagination(\n  context,\n  snapshotHardwares,\n  snapshotNumberOfHardwares\n) {\n  context.commit(SET_PAGINATION_FIRST_HARDWARES, snapshotHardwares.docs[0])\n  context.commit(\n    SET_PAGINATION_LAST_HARDWARES,\n    snapshotHardwares.docs[snapshotHardwares.docs.length - 1]\n  )\n  context.commit(\n    SET_TOTAL_NUMBER_OF_HARDWARES,\n    snapshotNumberOfHardwares.data().count\n  )\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n}\n"]}]}