{"remainingRequest":"/home/ash/opol7/node_modules/babel-loader/lib/index.js!/home/ash/opol7/node_modules/eslint-loader/index.js??ref--13-0!/home/ash/opol7/src/core/common.js","dependencies":[{"path":"/home/ash/opol7/src/core/common.js","mtime":1529606268855},{"path":"/home/ash/opol7/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/ash/opol7/node_modules/babel-loader/lib/index.js","mtime":1526583314000},{"path":"/home/ash/opol7/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["import _defineProperty from \"/home/ash/opol7/node_modules/@babel/runtime/helpers/builtin/es6/defineProperty\";\n\nvar _mutations;\n\nexport var SHOW_MESSAGE = 'SHOW_MESSAGE';\nexport var SET_USER = 'SET_USER';\nexport var SET_ISLOGGEDIN = 'SET_ISLOGGEDIN'; // import firebase from './firebaseInit'\n\nimport * as db from '../firebase';\nvar firebase = db.fb; // import firebase from 'firebase'\n\nimport Firebase from 'firebase'; // initial state\n\nvar state = {\n  message: {\n    visible: false,\n    text: '',\n    icon: '',\n    color: ''\n  },\n  user: null,\n  isLoggedIn: false // getters\n\n};\nvar getters = {\n  message: function message(state) {\n    return state.message;\n  },\n  user: function user(state) {\n    return state.user;\n  }\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, SHOW_MESSAGE, function (state, message) {\n  /* eslint-disable-next-line */\n  message.visible = true;\n  state.message = message;\n}), _defineProperty(_mutations, SET_USER, function (state, user) {\n  /* eslint-disable-next-line */\n  state.user = user;\n}), _defineProperty(_mutations, SET_ISLOGGEDIN, function (state, bool) {\n  /* eslint-disable-next-line */\n  state.isLoggedIn = bool;\n}), _mutations); // actions\n\nfunction setupUser() {\n  var user = firebase.auth().currentUser;\n  user.updateProfile({\n    displayName: 'Ash Downing',\n    photoURL: 'https://groupandrews.com/profiles/pictures/1.jpg'\n  }).then(function () {\n    // Update successful.\n    console.log(user.displayName);\n  }).catch(function (error) {\n    // An error happened.\n    console.log(error);\n  });\n}\n\nvar actions = {\n  showMessage: function showMessage(_ref, message) {\n    var commit = _ref.commit;\n    commit(SHOW_MESSAGE, message);\n  },\n  setUser: function setUser(_ref2, user) {\n    var commit = _ref2.commit;\n\n    if (user) {\n      commit(SET_ISLOGGEDIN, false); // console.log(firebase)\n      // console.log(user)\n\n      if (!user.displayName) {\n        setupUser();\n      }\n\n      commit(SET_USER, user); // since I can connect from multiple devices or browser tabs, we store each connection instance separately\n      // any time that connectionsRef's value is null (i.e. has no children) I am offline\n\n      var myConnectionsRef = firebase.database().ref('users/joe/connections'); // stores the timestamp of my last disconnect (the last time I was seen online)\n\n      var lastOnlineRef = firebase.database().ref('users/joe/lastOnline');\n      var connectedRef = firebase.database().ref('.info/connected');\n      console.log(Firebase.database.ServerValue.TIMESTAMP);\n      connectedRef.on('value', function (snap) {\n        if (snap.val() === true) {\n          // We're connected (or reconnected)! Do anything here that should happen only if online (or on reconnect)\n          var con = myConnectionsRef.push(); // When I disconnect, remove this device\n\n          con.onDisconnect().remove(); // Add this device to my connections list\n          // this value could contain info about the device or a timestamp too\n\n          con.set(true); // When I disconnect, update the last time I was seen online\n\n          lastOnlineRef.onDisconnect().set(Firebase.database.ServerValue.TIMESTAMP);\n        }\n      }); //   var isOnlineForDatabase = {\n      //     state: 'online',\n      //     username: user.displayName,\n      //     last_changed: firebase.database().ServerValue.TIMESTAMP,\n      //   }\n      //   var isOnlineForFirestore = {\n      //     state: 'online',\n      //     username: user.displayName,\n      //     last_changed: firebase.firestore.FieldValue.serverTimestamp(),\n      //   }\n      //   state.uid = user.uid\n      //   state.username = user.displayName\n      //   state.user = user\n      //   var uid = state.uid\n      //   var userStatusDatabaseRef = firebase.database().ref('/status/' + uid)\n      //   // var userStatusDatabaseRef = firebase.database().ref('/status/' + uid)\n      //   var userStatusFirestoreRef = firebase.firestore().doc('/status/' + uid)\n      //   userStatusFirestoreRef.set(isOnlineForFirestore)\n      //   console.log(userStatusDatabaseRef)\n      //   userStatusDatabaseRef.set(isOnlineForDatabase)\n      // } else {\n      //   var isOfflineForDatabase = {\n      //     state: 'offline',\n      //     username: state.username,\n      //     last_changed: firebase.database.ServerValue.TIMESTAMP,\n      //   }\n      //   var isOfflineForFirestore = {\n      //     state: 'offline',\n      //     username: state.username,\n      //     last_changed: firebase.firestore.FieldValue.serverTimestamp(),\n      //   }\n      //   var uid = state.uid\n      //   console.log(uid)\n      //   if (!uid || uid == 'undefined') {\n      //     return\n      //   }\n      //   var username = state.username\n      //   console.log(username)\n      //   if (!username || username == 'undefined') {\n      //     return\n      //   }\n      //   var userStatusDatabaseRef = firebase.database().ref('/status/' + uid)\n      //   var userStatusFirestoreRef = firebase.firestore().doc('/status/' + uid)\n      //   userStatusFirestoreRef.set(isOfflineForFirestore)\n      //   userStatusDatabaseRef.set(isOfflineForDatabase)\n      //   state.user = null\n      //   state.username = null\n      //   state.uid = null\n    } else {\n      commit(SET_ISLOGGEDIN, false);\n      commit(SET_USER, user);\n    }\n  }\n}; // mutations\n\nexport default {\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n};",{"version":3,"sources":["src/core/common.js"],"names":["SHOW_MESSAGE","SET_USER","SET_ISLOGGEDIN","db","firebase","fb","Firebase","state","message","visible","text","icon","color","user","isLoggedIn","getters","mutations","bool","setupUser","auth","currentUser","updateProfile","displayName","photoURL","then","console","log","catch","error","actions","showMessage","commit","setUser","myConnectionsRef","database","ref","lastOnlineRef","connectedRef","ServerValue","TIMESTAMP","on","snap","val","con","push","onDisconnect","remove","set","namespaced"],"mappings":"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","sourceRoot":"/home/ash/opol7","sourcesContent":["export const SHOW_MESSAGE = 'SHOW_MESSAGE'\nexport const SET_USER = 'SET_USER'\nexport const SET_ISLOGGEDIN = 'SET_ISLOGGEDIN'\n// import firebase from './firebaseInit'\nimport * as db from '../firebase'\nconst firebase = db.fb\n// import firebase from 'firebase'\nimport Firebase from 'firebase'\n// initial state\nconst state = {\n  message: {\n    visible: false,\n    text: '',\n    icon: '',\n    color: '',\n  },\n  user: null,\n  isLoggedIn: false,\n}\n\n// getters\nconst getters = {\n  message: state => state.message,\n  user: state => state.user,\n}\nconst mutations = {\n  [SHOW_MESSAGE](state, message) {\n    /* eslint-disable-next-line */\n    message.visible = true\n    state.message = message\n  },\n  [SET_USER](state, user) {\n    /* eslint-disable-next-line */\n    state.user = user\n  },\n  [SET_ISLOGGEDIN](state, bool) {\n    /* eslint-disable-next-line */\n    state.isLoggedIn = bool\n  },\n}\n// actions\nfunction setupUser() {\n  var user = firebase.auth().currentUser\n\n  user\n    .updateProfile({\n      displayName: 'Ash Downing',\n      photoURL: 'https://groupandrews.com/profiles/pictures/1.jpg',\n    })\n    .then(function() {\n      // Update successful.\n      console.log(user.displayName)\n    })\n    .catch(function(error) {\n      // An error happened.\n      console.log(error)\n    })\n}\n\nconst actions = {\n  showMessage({ commit }, message) {\n    commit(SHOW_MESSAGE, message)\n  },\n  setUser({ commit }, user) {\n    if (user) {\n      commit(SET_ISLOGGEDIN, false)\n      // console.log(firebase)\n      // console.log(user)\n      if (!user.displayName) {\n        setupUser()\n      }\n      commit(SET_USER, user)\n\n      // since I can connect from multiple devices or browser tabs, we store each connection instance separately\n      // any time that connectionsRef's value is null (i.e. has no children) I am offline\n      var myConnectionsRef = firebase.database().ref('users/joe/connections')\n\n      // stores the timestamp of my last disconnect (the last time I was seen online)\n      var lastOnlineRef = firebase.database().ref('users/joe/lastOnline')\n\n      var connectedRef = firebase.database().ref('.info/connected')\n      console.log(Firebase.database.ServerValue.TIMESTAMP)\n\n      connectedRef.on('value', function(snap) {\n        if (snap.val() === true) {\n          // We're connected (or reconnected)! Do anything here that should happen only if online (or on reconnect)\n          var con = myConnectionsRef.push()\n\n          // When I disconnect, remove this device\n          con.onDisconnect().remove()\n\n          // Add this device to my connections list\n          // this value could contain info about the device or a timestamp too\n          con.set(true)\n          // When I disconnect, update the last time I was seen online\n          lastOnlineRef\n            .onDisconnect()\n            .set(Firebase.database.ServerValue.TIMESTAMP)\n        }\n      })\n      //   var isOnlineForDatabase = {\n      //     state: 'online',\n      //     username: user.displayName,\n      //     last_changed: firebase.database().ServerValue.TIMESTAMP,\n      //   }\n\n      //   var isOnlineForFirestore = {\n      //     state: 'online',\n      //     username: user.displayName,\n      //     last_changed: firebase.firestore.FieldValue.serverTimestamp(),\n      //   }\n      //   state.uid = user.uid\n      //   state.username = user.displayName\n      //   state.user = user\n      //   var uid = state.uid\n\n      //   var userStatusDatabaseRef = firebase.database().ref('/status/' + uid)\n      //   // var userStatusDatabaseRef = firebase.database().ref('/status/' + uid)\n      //   var userStatusFirestoreRef = firebase.firestore().doc('/status/' + uid)\n      //   userStatusFirestoreRef.set(isOnlineForFirestore)\n      //   console.log(userStatusDatabaseRef)\n      //   userStatusDatabaseRef.set(isOnlineForDatabase)\n      // } else {\n      //   var isOfflineForDatabase = {\n      //     state: 'offline',\n      //     username: state.username,\n      //     last_changed: firebase.database.ServerValue.TIMESTAMP,\n      //   }\n\n      //   var isOfflineForFirestore = {\n      //     state: 'offline',\n      //     username: state.username,\n      //     last_changed: firebase.firestore.FieldValue.serverTimestamp(),\n      //   }\n\n      //   var uid = state.uid\n      //   console.log(uid)\n      //   if (!uid || uid == 'undefined') {\n      //     return\n      //   }\n      //   var username = state.username\n      //   console.log(username)\n      //   if (!username || username == 'undefined') {\n      //     return\n      //   }\n      //   var userStatusDatabaseRef = firebase.database().ref('/status/' + uid)\n      //   var userStatusFirestoreRef = firebase.firestore().doc('/status/' + uid)\n      //   userStatusFirestoreRef.set(isOfflineForFirestore)\n      //   userStatusDatabaseRef.set(isOfflineForDatabase)\n      //   state.user = null\n      //   state.username = null\n      //   state.uid = null\n    } else {\n      commit(SET_ISLOGGEDIN, false)\n      commit(SET_USER, user)\n    }\n  },\n}\n\n// mutations\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations,\n}\n"]}]}